"use strict";(self.webpackChunkhuman_and_machine=self.webpackChunkhuman_and_machine||[]).push([[33151],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return m}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),d=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},u=function(e){var n=d(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},l=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=d(r),m=o,h=l["".concat(c,".").concat(m)]||l[m]||p[m]||a;return r?t.createElement(h,s(s({ref:n},u),{},{components:r})):t.createElement(h,s({ref:n},u))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=l;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var d=2;d<a;d++)s[d]=r[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}l.displayName="MDXCreateElement"},76220:function(e,n,r){r.r(n),r.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return p}});var t=r(87462),o=r(63366),a=(r(67294),r(3905)),s=["components"],i={id:"17-15-handling-purchases-and-updating-ui",title:"17.15 Handling Purchases And Updating UI",date:new Date("2021-07-17T15:19:38.000Z")},c=void 0,d={unversionedId:"react-complete-guide/17-redux-advanced-burger-project/17-15-handling-purchases-and-updating-ui",id:"react-complete-guide/17-redux-advanced-burger-project/17-15-handling-purchases-and-updating-ui",title:"17.15 Handling Purchases And Updating UI",description:"BurgerBuilder.js",source:"@site/courses/react-complete-guide/17-redux-advanced-burger-project/17-15-handling-purchases-and-updating-ui.md",sourceDirName:"react-complete-guide/17-redux-advanced-burger-project",slug:"/react-complete-guide/17-redux-advanced-burger-project/17-15-handling-purchases-and-updating-ui",permalink:"/hm/courses/react-complete-guide/17-redux-advanced-burger-project/17-15-handling-purchases-and-updating-ui",draft:!1,editUrl:"https://github.com/papa31/hm/edit/documentation/courses/react-complete-guide/17-redux-advanced-burger-project/17-15-handling-purchases-and-updating-ui.md",tags:[],version:"current",lastUpdatedBy:"PaPa31",lastUpdatedAt:1631602446,formattedLastUpdatedAt:"9/14/2021",frontMatter:{id:"17-15-handling-purchases-and-updating-ui",title:"17.15 Handling Purchases And Updating UI",date:"2021-07-17T15:19:38.000Z"},sidebar:"Docs",previous:{title:"17.14 Combining Reducers",permalink:"/hm/courses/react-complete-guide/17-redux-advanced-burger-project/17-14-combining-reducers"},next:{title:"17.16 Resetting Price After Purchases",permalink:"/hm/courses/react-complete-guide/17-redux-advanced-burger-project/17-16-resetting-price-after-purchases"}},u={},p=[{value:"<code>BurgerBuilder.js</code>",id:"burgerbuilderjs",level:2},{value:"<code>Checkout.js</code>",id:"checkoutjs",level:2},{value:"<code>actionTypes.js</code>",id:"actiontypesjs",level:2},{value:"<code>actions/index.js</code>",id:"actionsindexjs",level:2},{value:"<code>actions/order.js</code>",id:"actionsorderjs",level:2}],l={toc:p};function m(e){var n=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"burgerbuilderjs"},(0,a.kt)("inlineCode",{parentName:"h2"},"BurgerBuilder.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src\\containers\\BurgerBuilder\\BurgerBuilder.js" {10,46,114,116-118}',title:'"src\\containers\\BurgerBuilder\\BurgerBuilder.js"',"{10,46,114,116-118}":!0},'import React, { Component, Fragment } from "react";\nimport { connect } from "react-redux";\nimport axios from "../../axios-orders";\nimport BuildControls from "../../components/Burger/BuildControls/BuildControls";\nimport Burger from "../../components/Burger/Burger";\nimport OrderSummary from "../../components/Burger/OrderSummary/OrderSummary";\nimport Modal from "../../components/UI/Modal/Modal";\nimport Spinner from "../../components/UI/Spinner/Spinner";\nimport withErrorHandler from "../../hoc/withErrorHandler/withErrorHandler";\nimport * as actions from "../../store/actions/index";\n\nclass BurgerBuilder extends Component {\n  // constructor(props) {\n  //     super(props);\n  //     this.state = {...}\n  // }\n  state = {\n    purchasing: false,\n  };\n\n  componentDidMount() {\n    console.log(this.props);\n    this.props.onInitIngredients();\n  }\n\n  updatePurchaseState(ingredients) {\n    const sum = Object.keys(ingredients)\n      .map((igKey) => {\n        return ingredients[igKey];\n      })\n      .reduce((sum, el) => {\n        return sum + el;\n      }, 0);\n    return sum > 0;\n  }\n\n  purchaseHandler = () => {\n    this.setState({ purchasing: true });\n  };\n\n  purchaseCancelHandler = () => {\n    this.setState({ purchasing: false });\n  };\n\n  purchaseContinueHandler = () => {\n    this.props.onInitPurchase();\n    this.props.history.push("/checkout");\n  };\n  render() {\n    const disabledInfo = {\n      ...this.props.ings,\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n    let orderSummary = null;\n\n    let burger = this.props.error ? (\n      <p>Ingredients can\'t be loaded!</p>\n    ) : (\n      <Spinner />\n    );\n\n    if (this.props.ings) {\n      burger = (\n        <Fragment>\n          <Burger ingredients={this.props.ings} />\n          <BuildControls\n            ingredientAdded={this.props.onIgredientAdded}\n            ingredientRemoved={this.props.onIgredientRemoved}\n            disabled={disabledInfo}\n            purchasable={this.updatePurchaseState(this.props.ings)}\n            ordered={this.purchaseHandler}\n            price={this.props.price}\n          />\n        </Fragment>\n      );\n\n      orderSummary = (\n        <OrderSummary\n          ingredients={this.props.ings}\n          purchaseCancelled={this.purchaseCancelHandler}\n          purchaseContinued={this.purchaseContinueHandler}\n          price={this.props.price}\n        />\n      );\n    }\n\n    return (\n      <Fragment>\n        <Modal\n          show={this.state.purchasing}\n          modalClosed={this.purchaseCancelHandler}\n        >\n          {orderSummary}\n        </Modal>\n        {burger}\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    error: state.burgerBuilder.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onIgredientAdded: (ingName) => dispatch(actions.addIngredient(ingName)),\n    onIgredientRemoved: (ingName) =>\n      dispatch(actions.removeIngredient(ingName)),\n    onInitIngredients: () => dispatch(actions.initIngredients()),\n    onInitPurchase: () => dispatch(actions.purchaseInit()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(BurgerBuilder, axios));\n')),(0,a.kt)("h2",{id:"checkoutjs"},(0,a.kt)("inlineCode",{parentName:"h2"},"Checkout.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src\\containers\\Checkout\\Checkout.js" {18-20,23,44}',title:'"src\\containers\\Checkout\\Checkout.js"',"{18-20,23,44}":!0},'import React, { Component } from "react";\nimport { connect } from "react-redux";\nimport { Redirect, Route } from "react-router-dom";\nimport CheckoutSummary from "../../components/Order/CheckoutSummary/CheckoutSummary";\nimport ContactData from "./ContactData/ContactData";\n\nclass Checkout extends Component {\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace("/checkout/contact-data");\n  };\n  render() {\n    let summary = <Redirect to="/" />;\n    if (this.props.ings) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to="/" />\n      ) : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ings}\n            checkoutCancelled={this.checkoutCancelledHandler}\n            checkoutContinued={this.checkoutContinuedHandler}\n          />\n          <Route\n            path={this.props.match.path + "/contact-data"}\n            component={ContactData}\n          />\n        </div>\n      );\n    }\n\n    return summary;\n')),(0,a.kt)("h2",{id:"actiontypesjs"},(0,a.kt)("inlineCode",{parentName:"h2"},"actionTypes.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src\\store\\actions\\actionTypes.js" {9}',title:'"src\\store\\actions\\actionTypes.js"',"{9}":!0},'export const ADD_INGREDIENT = "ADD_INGREDIENT";\nexport const REMOVE_INGREDIENT = "REMOVE_INGREDIENT";\nexport const SET_INGREDIENTS = "SET_INGREDIENTS";\nexport const FETCH_INGREDIENTS_FAILED = "FETCH_INGREDIENTS_FAILED";\n\nexport const PURCHASE_BURGER_START = "PURCHASE_BURGER_START";\nexport const PURCHASE_BURGER_SUCCESS = "PURCHASE_BURGER_SUCCESS";\nexport const PURCHASE_BURGER_FAIL = "PURCHASE_BURGER_FAIL";\nexport const PURCHASE_INIT = "PURCHASE_INIT";\n')),(0,a.kt)("h2",{id:"actionsindexjs"},(0,a.kt)("inlineCode",{parentName:"h2"},"actions/index.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src\\store\\actions\\index.js" {6}',title:'"src\\store\\actions\\index.js"',"{6}":!0},'export {\n  addIngredient,\n  initIngredients,\n  removeIngredient,\n} from "./burgerBuilder";\nexport { purchaseBurger, purchaseInit } from "./order";\n')),(0,a.kt)("h2",{id:"actionsorderjs"},(0,a.kt)("inlineCode",{parentName:"h2"},"actions/order.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src\\store\\actions\\order.js" {40-44}',title:'"src\\store\\actions\\order.js"',"{40-44}":!0},'import axios from "../../axios-orders";\nimport * as actionTypes from "./actionTypes";\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData,\n  };\n};\n\nexport const purchaseBurgerFail = (error) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error,\n  };\n};\n\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START,\n  };\n};\n\nexport const purchaseBurger = (orderData) => {\n  return (dispatch) => {\n    dispatch(purchaseBurgerStart());\n    axios\n      .post("/orders.json", orderData)\n      .then((response) => {\n        console.log(response.data);\n        dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n      })\n      .catch((error) => {\n        dispatch(purchaseBurgerFail(error));\n      });\n  };\n};\n\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT,\n  };\n};\n')))}m.isMDXComponent=!0}}]);