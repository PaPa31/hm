"use strict";(self.webpackChunkhuman_and_machine=self.webpackChunkhuman_and_machine||[]).push([[85546],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),d=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),c=r,g=u["".concat(l,".").concat(c)]||u[c]||m[c]||a;return n?i.createElement(g,o(o({ref:t},p),{},{components:n})):i.createElement(g,o({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<a;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4001:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var i=n(87462),r=(n(67294),n(3905));const a={id:"sign-with-magnitude",title:"Sign/Magnitude"},o=void 0,s={unversionedId:"digital-design/binary-numbers/sign-with-magnitude",id:"digital-design/binary-numbers/sign-with-magnitude",title:"Sign/Magnitude",description:"2021-02-06 1710",source:"@site/docs/digital-design/binary-numbers/sign-with-magnitude.md",sourceDirName:"digital-design/binary-numbers",slug:"/digital-design/binary-numbers/sign-with-magnitude",permalink:"/hm/docs/digital-design/binary-numbers/sign-with-magnitude",draft:!1,editUrl:"https://github.com/papa31/hm/edit/documentation/docs/digital-design/binary-numbers/sign-with-magnitude.md",tags:[],version:"current",lastUpdatedBy:"papa",lastUpdatedAt:1612883719,formattedLastUpdatedAt:"Feb 9, 2021",frontMatter:{id:"sign-with-magnitude",title:"Sign/Magnitude"},sidebar:"Docs",previous:{title:"Sign Extension",permalink:"/hm/docs/digital-design/binary-numbers/sign-extension"},next:{title:"Three Ideas of Signed Binary Numbers",permalink:"/hm/docs/digital-design/binary-numbers/three-ideas-signed-binary-numbers"}},l={},d=[{value:"Limitations",id:"limitations",level:2}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"2021-02-06 17:45:10"),(0,r.kt)("p",null,"This is simplest method. The most significant bit is a sign bit: 1 - negative, 0 - positive. Others bits is a magnitude (absolute value). No need the inverting or something else. Range in N-bit numbers: ","[-2",(0,r.kt)("sup",null,"N-1"),"+1, 2",(0,r.kt)("sup",null,"N-1"),"-1]","."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh",metastring:'title="8-bit"',title:'"8-bit"'},"binary -> decimal\n1000 0001 = -1\n0000 0001 = 1\n\n8-bit min = 1111 1111 (-127)\n8-bit max = 0111 1111 (+127)\n")),(0,r.kt)("h2",{id:"limitations"},"Limitations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Two representation of zero: 0000 0000 (0) and 1000 0000 (-0). This needs additional verification."),(0,r.kt)("li",{parentName:"ul"},"Addition doesn't work, for example: ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"  1001 = -6\n+\n  0110 = 6\n  ----\n  1111 -> Wrong!\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Addition and subtraction require different behavior depending on the sign bit. (Whereas ",(0,r.kt)("a",{parentName:"p",href:"ones-complement"},"ones' complement")," can ignore sign bit and just do the end-around carry. And ",(0,r.kt)("a",{parentName:"p",href:"twos-complement"},"two's complement")," can ignore sign bit and depend on the overflow behavior.)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Comparing two numbers also requires additional sign check."),(0,r.kt)("li",{parentName:"ul"},"Minimal negative number: -127 (instead -128 in ",(0,r.kt)("em",{parentName:"li"},"two's complement"),")")),(0,r.kt)("p",null,"Some early binary computers (",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/IBM_7090"},"IBM 7090"),") used this representation. Perhaps because of its naturalistic."),(0,r.kt)("p",null,"From: ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Signed_number_representations#Signed_magnitude_representation"},"Signed Number Representation (Wikipedia)")))}m.isMDXComponent=!0}}]);