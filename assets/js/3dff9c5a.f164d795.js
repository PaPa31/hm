"use strict";(self.webpackChunkhuman_and_machine=self.webpackChunkhuman_and_machine||[]).push([[11277],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},68522:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return d}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),s=["components"],i={id:"4-07-updating-state-immutably",title:"4.07 Updating State Immutably",date:new Date("2021-03-29T23:32:07.000Z")},l=void 0,p={unversionedId:"react-complete-guide/04-lists-and-conditionals/Lessons/4-07-updating-state-immutably",id:"react-complete-guide/04-lists-and-conditionals/Lessons/4-07-updating-state-immutably",title:"4.07 Updating State Immutably",description:"The flaw of this approach is that in JavaScript, objects and arrays are reference types, so when I get persons from my state as I do here I actually get a pointer to the original person\u2019s object managed by React, to the original state I should say. If I then splice it here, I already mutate this original data and whilst it does work without throwing an error, this is not really how you should do it, this can lead to unpredictable apps and is definitely a bad practice.",source:"@site/courses/react-complete-guide/04-lists-and-conditionals/Lessons/4-07-updating-state-immutably.md",sourceDirName:"react-complete-guide/04-lists-and-conditionals/Lessons",slug:"/react-complete-guide/04-lists-and-conditionals/Lessons/4-07-updating-state-immutably",permalink:"/hm/courses/react-complete-guide/04-lists-and-conditionals/Lessons/4-07-updating-state-immutably",draft:!1,editUrl:"https://github.com/papa31/hm/edit/documentation/courses/react-complete-guide/04-lists-and-conditionals/Lessons/4-07-updating-state-immutably.md",tags:[],version:"current",lastUpdatedBy:"PaPa31",lastUpdatedAt:1631602446,formattedLastUpdatedAt:"9/14/2021",frontMatter:{id:"4-07-updating-state-immutably",title:"4.07 Updating State Immutably",date:"2021-03-29T23:32:07.000Z"},sidebar:"Docs",previous:{title:"4.06 Lists And State",permalink:"/hm/courses/react-complete-guide/04-lists-and-conditionals/Lessons/4-06-lists-and-state"},next:{title:"4.08 Lists And Keys",permalink:"/hm/courses/react-complete-guide/04-lists-and-conditionals/Lessons/4-08-lists-and-keys"}},c={},d=[{value:"Good Practice",id:"good-practice",level:2},{value:"slice() method",id:"slice-method",level:3},{value:"spread operator <code>[...]</code>",id:"spread-operator-",level:3}],u={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The flaw of this approach is that in JavaScript, objects and arrays are reference types, so when I get persons from my state as I do here I actually get a pointer to the original person\u2019s object managed by React, to the original state I should say. If I then ",(0,o.kt)("inlineCode",{parentName:"p"},"splice")," it here, I already ",(0,o.kt)("inlineCode",{parentName:"p"},"mutate")," this original data and whilst it does work without throwing an error, this is not really how you should do it, this can lead to unpredictable apps and is definitely a bad practice."),(0,o.kt)("h2",{id:"good-practice"},"Good Practice"),(0,o.kt)("p",null,"You should always update state in an immutable fashion, so without mutating the original state first. Create a copy, change that and then update the state with that state."),(0,o.kt)("h3",{id:"slice-method"},"slice() method"),(0,o.kt)("p",null,"A good practice is to create a copy of your persons array before manipulating it and a simple way of doing this is by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"slice")," method. Slice without arguments simply copies the full array and returns a new one which is then stored here."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.js" {3}',title:'"App.js"',"{3}":!0},"...\n    deletePersonHandler = (personIndex) => {\n        const persons = this.state.persons.slice();\n        persons.splice(personIndex, 1);\n        this.setState({ persons: persons });\n    };\n...\n")),(0,o.kt)("p",null,"And you can now safely edit this new one and then update to react state with your new array."),(0,o.kt)("h3",{id:"spread-operator-"},"spread operator ",(0,o.kt)("inlineCode",{parentName:"h3"},"[...]")),(0,o.kt)("p",null,"An alternative to this approach would be to use it a ES6 feature, the ",(0,o.kt)("inlineCode",{parentName:"p"},"spread")," operator. It spreads out the elements in this array into a list of elements which simply then gets added to this array, so that now we have an array, a new array, with the objects from the old array but not the old array itself."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.js" {3}',title:'"App.js"',"{3}":!0},"...\n  deletePersonHandler = (personIndex) => {\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({ persons: persons });\n  };\n...\n")),(0,o.kt)("p",null,"So this is basically an equivalent to the ",(0,o.kt)("inlineCode",{parentName:"p"},"slice")," approach, use whichever one you prefer, this is the more modern one, and you will see this ",(0,o.kt)("inlineCode",{parentName:"p"},"spread")," operator more often throughout the course."))}h.isMDXComponent=!0}}]);