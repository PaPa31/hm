"use strict";(self.webpackChunkhuman_and_machine=self.webpackChunkhuman_and_machine||[]).push([[7803],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(a),d=r,h=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1994:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const o={id:"11-14-absolute-vs-relative-paths-article",title:"11.14 Absolute vs Relative Paths Article",date:new Date("2021-04-14T18:21:57.000Z")},i=void 0,l={unversionedId:"react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article",id:"react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article",title:"11.14 Absolute vs Relative Paths Article",description:"You learned about `\xa0, you learned about the to`\xa0 property it uses.",source:"@site/courses/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article.md",sourceDirName:"react-complete-guide/11-multi-page-feeling-in-single-page-app-routing",slug:"/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article",permalink:"/hm/courses/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article",draft:!1,editUrl:"https://github.com/papa31/hm/edit/documentation/courses/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article.md",tags:[],version:"current",lastUpdatedBy:"PaPa31",lastUpdatedAt:1631602446,formattedLastUpdatedAt:"Sep 14, 2021",frontMatter:{id:"11-14-absolute-vs-relative-paths-article",title:"11.14 Absolute vs Relative Paths Article",date:"2021-04-14T18:21:57.000Z"},sidebar:"Courses",previous:{title:"11.13 Absolute vs Relative Paths",permalink:"/hm/courses/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-13-absolute-vs-relative-paths"},next:{title:"11.15 Styling Active Route",permalink:"/hm/courses/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-15-styling-active-route"}},p={},s=[{value:"Absolute Paths",id:"absolute-paths",level:2},{value:"Relative Paths",id:"relative-paths",level:2}],u={toc:s};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You learned about ",(0,r.kt)("inlineCode",{parentName:"p"},"<Link>"),"\xa0, you learned about the ",(0,r.kt)("inlineCode",{parentName:"p"},"to"),"\xa0 property it uses."),(0,r.kt)("p",null,"The path you can use in to can be either ",(0,r.kt)("strong",{parentName:"p"},"absolute")," or ",(0,r.kt)("strong",{parentName:"p"},"relative"),"."),(0,r.kt)("h2",{id:"absolute-paths"},"Absolute Paths"),(0,r.kt)("p",null,"By default, if you just enter ",(0,r.kt)("inlineCode",{parentName:"p"},'to="/some-path"'),"\xa0 or ",(0,r.kt)("inlineCode",{parentName:"p"},'to="some-path"'),"\xa0, that's an ",(0,r.kt)("strong",{parentName:"p"},"absolute path"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Absolute path"),"\xa0means that it's ",(0,r.kt)("strong",{parentName:"p"},"always appended right after your domain"),". Therefore, both syntaxes (with and without leading slash) lead to ",(0,r.kt)("inlineCode",{parentName:"p"},"example.com/some-path"),"\xa0."),(0,r.kt)("h2",{id:"relative-paths"},"Relative Paths"),(0,r.kt)("p",null,"Sometimes, you might want to create a relative path instead. This is especially useful, if your component is already loaded given a specific path (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"posts"),"\xa0) and you then want to append something to that existing path (so that you, for example, get ",(0,r.kt)("inlineCode",{parentName:"p"},"/posts/new"),"\xa0)."),(0,r.kt)("p",null,"If you're on a component loaded via ",(0,r.kt)("inlineCode",{parentName:"p"},"/posts"),"\xa0,\xa0",(0,r.kt)("inlineCode",{parentName:"p"},'to="new"'),"\xa0 would lead to ",(0,r.kt)("inlineCode",{parentName:"p"},"example.com/new"),"\xa0, ",(0,r.kt)("strong",{parentName:"p"},"NOT")," ",(0,r.kt)("inlineCode",{parentName:"p"},"example.com/posts/new"),"\xa0."),(0,r.kt)("p",null,"To change this behavior, you have to find out which path you're on and add the new fragment to that existing path. You can do that with the ",(0,r.kt)("inlineCode",{parentName:"p"},"url"),"\xa0 property of ",(0,r.kt)("inlineCode",{parentName:"p"},"props.match"),"\xa0:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Link to={props.match.url + '/new'}>\n")),(0,r.kt)("p",null,"will lead to ",(0,r.kt)("inlineCode",{parentName:"p"},"example.com/posts/new"),"\xa0 when placing this link in a component loaded on ",(0,r.kt)("inlineCode",{parentName:"p"},"/posts"),"\xa0. If you'd use the same ",(0,r.kt)("inlineCode",{parentName:"p"},"<Link>"),"\xa0 in a component loaded via ",(0,r.kt)("inlineCode",{parentName:"p"},"/all-posts"),"\xa0, the link would point to ",(0,r.kt)("inlineCode",{parentName:"p"},"/all-posts/new"),"\xa0."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"There's no better or worse way of creating Link paths")," - choose the one you need. Sometimes, you want to ensure that you always load the same path, no matter on which path you already are =>\xa0Use absolute paths in this scenario."),(0,r.kt)("p",null,"Use relative paths if you want to navigate relative to your existing path."))}c.isMDXComponent=!0}}]);