"use strict";(self.webpackChunkhuman_and_machine=self.webpackChunkhuman_and_machine||[]).push([[27178],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(r),d=i,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return r?n.createElement(g,o(o({ref:t},c),{},{components:r})):n.createElement(g,o({ref:t},c))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},39024:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var n=r(87462),i=r(63366),a=(r(67294),r(3905)),o=["components"],l={title:"Sed: Normalize markdown file with Regex",authors:["papa31"],tags:["sed","regex","web clipper"],date:new Date("2020-11-26T21:13:28.000Z"),description:"How to normalize markdown file with Regex",draft:!1},s=void 0,p={permalink:"/hm/blog/2020/11/26/sed-normalize-md-file-with-regex",editUrl:"https://github.com/papa31/hm/edit/documentation/blog/2020-11-26-sed-normalize-md-file-with-regex.md",source:"@site/blog/2020-11-26-sed-normalize-md-file-with-regex.md",title:"Sed: Normalize markdown file with Regex",description:"How to normalize markdown file with Regex",date:"2020-11-26T21:13:28.000Z",formattedDate:"November 26, 2020",tags:[{label:"sed",permalink:"/hm/blog/tags/sed"},{label:"regex",permalink:"/hm/blog/tags/regex"},{label:"web clipper",permalink:"/hm/blog/tags/web-clipper"}],readingTime:.795,truncated:!0,authors:[{name:"papa31",url:"https://github.com/papa31",imageURL:"https://github.com/papa31.png",key:"papa31"}],frontMatter:{title:"Sed: Normalize markdown file with Regex",authors:["papa31"],tags:["sed","regex","web clipper"],date:"2020-11-26T21:13:28.000Z",description:"How to normalize markdown file with Regex",draft:!1},prevItem:{title:"Yandex.disk: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043b\u0430\u0447\u043d\u043e\u0433\u043e \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0430 \u0432 \u041b\u0438\u043d\u0443\u043a\u0441",permalink:"/hm/blog/2020/12/21/yandex-disk-usage-cloud-storage"},nextItem:{title:" Git Best Practices: Commit Often, Perfect Later, Publish Once",permalink:"/hm/blog/2012/01/13/git-best-practicies"}},c={authorsImageUrls:[void 0]},u=[{value:"Initial file",id:"initial-file",level:2},{value:"Normalize with <code>sed</code> &amp; Regular Expressions",id:"normalize-with-sed--regular-expressions",level:2},{value:"Resulting file",id:"resulting-file",level:2}],m={toc:u};function d(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Once upon a time I found this page:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://sethrobertson.github.io/GitBestPractices/"},"http://sethrobertson.github.io/GitBestPractices/")," from this ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SethRobertson/GitBestPractices"},"repo"),"."),(0,a.kt)("h2",{id:"initial-file"},"Initial file"),(0,a.kt)("p",null,"I downloaded it from the repo's ",(0,a.kt)("inlineCode",{parentName:"p"},"gh-pages")," ",(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/SethRobertson/GitBestPractices/gh-pages/index.md"},"branch")," and saved as ",(0,a.kt)("inlineCode",{parentName:"p"},"git-best-initial.md")),(0,a.kt)("p",null,"After grabbing via Web Clipper (Chrome browser plugin), this file needed to be normalized. The ",(0,a.kt)("strong",{parentName:"p"},"Table of Content")," (TOC) links in this file do not work correctly, and some code blocks look ugly."),(0,a.kt)("h2",{id:"normalize-with-sed--regular-expressions"},"Normalize with ",(0,a.kt)("inlineCode",{parentName:"h2"},"sed")," & Regular Expressions"),(0,a.kt)("p",null,"Initially I was processing the file along with the TOC:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cat git-best-initial.md | sed -e 's/ \\/>/><\\/a>/g' -e 's/\\* \\(\\w.*$\\)/\\* **\\1**/g' -e 's/^    //g' -e 's/^### /### \\&emsp; /g' | less\n")),(0,a.kt)("p",null,"But then I deleted the TOC because it is automatically generated by Docusaurus (from the h2 & h3 headers) and simplified the code a bit:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cat git-best-initial.md | sed -e 's/\\*   \\(.*$\\)/\\* **\\1**/g' -e 's/^### /### \\&emsp; /g' > result.md\n")),(0,a.kt)("h2",{id:"resulting-file"},"Resulting file"),(0,a.kt)("p",null,"Finally I manually edited the resulting file and got this: ",(0,a.kt)("a",{parentName:"p",href:"/docs/workplace/git/git-best-practicies"},"Git Best Practices")))}d.isMDXComponent=!0}}]);