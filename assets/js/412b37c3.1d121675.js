"use strict";(self.webpackChunkhuman_and_machine=self.webpackChunkhuman_and_machine||[]).push([[48713],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return m}});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var d=a.createContext({}),s=function(n){var e=a.useContext(d),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=s(n.components);return a.createElement(d.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,d=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),c=s(t),m=r,f=c["".concat(d,".").concat(m)]||c[m]||u[m]||o;return t?a.createElement(f,i(i({ref:e},p),{},{components:t})):a.createElement(f,i({ref:e},p))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var d in e)hasOwnProperty.call(e,d)&&(l[d]=e[d]);l.originalType=n,l.mdxType="string"==typeof n?n:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},60889:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return p},default:function(){return c}});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),i=["components"],l={id:"13-11-adding-validation-feedback",title:"13.11 Adding Validation Feedback",date:new Date("2021-04-21T11:30:06.000Z")},d=void 0,s={unversionedId:"react-complete-guide/13-forms-and-form-validation/13-11-adding-validation-feedback",id:"react-complete-guide/13-forms-and-form-validation/13-11-adding-validation-feedback",title:"13.11 Adding Validation Feedback",description:"Input.js",source:"@site/courses/react-complete-guide/13-forms-and-form-validation/13-11-adding-validation-feedback.md",sourceDirName:"react-complete-guide/13-forms-and-form-validation",slug:"/react-complete-guide/13-forms-and-form-validation/13-11-adding-validation-feedback",permalink:"/hm/courses/react-complete-guide/13-forms-and-form-validation/13-11-adding-validation-feedback",editUrl:"https://github.com/papa31/hm/edit/documentation/courses/react-complete-guide/13-forms-and-form-validation/13-11-adding-validation-feedback.md",tags:[],version:"current",lastUpdatedBy:"PaPa31",lastUpdatedAt:1631602446,formattedLastUpdatedAt:"9/14/2021",frontMatter:{id:"13-11-adding-validation-feedback",title:"13.11 Adding Validation Feedback",date:"2021-04-21T11:30:06.000Z"},sidebar:"Docs",previous:{title:"13.10 Fixing Common Validation Gotcha",permalink:"/hm/courses/react-complete-guide/13-forms-and-form-validation/13-10-fixing-common-validation-gotcha"},next:{title:"13.12 Improving Visual Feedback",permalink:"/hm/courses/react-complete-guide/13-forms-and-form-validation/13-12-improving-visual-feedback"}},p=[{value:"<code>Input.js</code>",id:"inputjs",children:[],level:2},{value:"<code>Input.module.css</code>",id:"inputmodulecss",children:[],level:2},{value:"<code>ContactData.js</code>",id:"contactdatajs",children:[],level:2}],u={toc:p};function c(n){var e=n.components,t=(0,r.Z)(n,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"inputjs"},(0,o.kt)("inlineCode",{parentName:"h2"},"Input.js")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Input.js" {6-10,16,26,36,51}',title:'"Input.js"',"{6-10,16,26,36,51}":!0},'import React from "react";\nimport classes from "./Input.module.css";\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputClasses = [classes.InputElement];\n\n  if (props.invalid && props.shouldValidate) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case "input":\n      inputElement = (\n        <input\n          className={inputClasses.join(" ")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case "textarea":\n      inputElement = (\n        <textarea\n          className={inputClasses.join(" ")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case "select":\n      inputElement = (\n        <select\n          className={inputClasses.join(" ")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputClasses.join(" ")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n')),(0,o.kt)("h2",{id:"inputmodulecss"},(0,o.kt)("inlineCode",{parentName:"h2"},"Input.module.css")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Input.module.css" {29-32}',title:'"Input.module.css"',"{29-32}":!0},".Input {\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n}\n\n.Label {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 8px;\n}\n\n.InputElement {\n  outline: none;\n  border: 1px solid #ccc;\n  background-color: #fff;\n  font: inherit;\n  padding: 6px 10px;\n  display: block;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.InputElement:focus {\n  outline: none;\n  background-color: #ccc;\n}\n\n.Invalid {\n  border: 1px solid red;\n  background-color: #fda49a;\n}\n")),(0,o.kt)("h2",{id:"contactdatajs"},(0,o.kt)("inlineCode",{parentName:"h2"},"ContactData.js")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="ContactData.js" {161-162}',title:'"ContactData.js"',"{161-162}":!0},'import React, { Component } from "react";\nimport axios from "../../../axios-orders";\nimport Button from "../../../components/UI/Button/Button";\nimport Input from "../../../components/UI/Input/Input";\nimport Spinner from "../../../components/UI/Spinner/Spinner";\nimport classes from "./ContactData.module.css";\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: "input",\n        elementConfig: {\n          type: "text",\n          placeholder: "Your Name",\n        },\n        value: "",\n        validation: {\n          required: true,\n        },\n        valid: false,\n      },\n      street: {\n        elementType: "input",\n        elementConfig: {\n          type: "text",\n          placeholder: "Street",\n        },\n        value: "",\n        validation: {\n          required: true,\n        },\n        valid: false,\n      },\n      zipCode: {\n        elementType: "input",\n        elementConfig: {\n          type: "text",\n          placeholder: "ZIP Code",\n        },\n        value: "",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5,\n        },\n        valid: false,\n      },\n      country: {\n        elementType: "input",\n        elementConfig: {\n          type: "text",\n          placeholder: "Country",\n        },\n        value: "",\n        validation: {\n          required: true,\n        },\n        valid: false,\n      },\n      email: {\n        elementType: "input",\n        elementConfig: {\n          type: "email",\n          placeholder: "Your e-mail",\n        },\n        value: "",\n        validation: {\n          required: true,\n        },\n        valid: false,\n      },\n      deliveryMethod: {\n        elementType: "select",\n        elementConfig: {\n          options: [\n            { value: "fastest", displayValue: "Fastest" },\n            { value: "cheapest", displayValue: "Cheapest" },\n          ],\n        },\n        value: "",\n      },\n    },\n    loading: false,\n  };\n\n  orderHandler = (event) => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    const formData = {};\n    for (let formElementIdentifier in this.state.orderForm) {\n      formData[formElementIdentifier] = this.state.orderForm[\n        formElementIdentifier\n      ].value;\n    }\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n      orderData: formData,\n    };\n    axios\n      .post("/orders.json", order)\n      .then((response) => {\n        this.setState({ loading: false });\n        this.props.history.push("/");\n      })\n      .catch((error) => {\n        this.setState({ loading: false });\n      });\n  };\n\n  checkValidity(value, rules) {\n    let isValid = true;\n    if (rules.required) {\n      isValid = value.trim() !== "" && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = {\n      ...this.state.orderForm,\n    };\n    const updatedFormElement = {\n      ...updatedOrderForm[inputIdentifier],\n    };\n    updatedFormElement.value = event.target.value;\n    updatedFormElement.valid = this.checkValidity(\n      updatedFormElement.value,\n      updatedFormElement.validation\n    );\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    console.log(updatedFormElement);\n    this.setState({ orderForm: updatedOrderForm });\n  };\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n    let form = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map((formElement) => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        <Button btnType="Success">ORDER</Button>\n      </form>\n    );\n    if (this.state.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\nexport default ContactData;\n')))}c.isMDXComponent=!0}}]);