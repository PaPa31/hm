"use strict";(self.webpackChunkhuman_and_machine=self.webpackChunkhuman_and_machine||[]).push([[15817],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,v=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return t?r.createElement(v,l(l({ref:n},d),{},{components:t})):r.createElement(v,l({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},28015:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),l=["components"],i={id:"nvm-per-project-folder",title:"nvm per Project Folder",date:new Date("2021-09-11T16:03:29.000Z")},c=void 0,s={unversionedId:"node/nvm-per-project-folder",id:"node/nvm-per-project-folder",title:"nvm per Project Folder",description:"If you want to set a specific node version for the certain project, you can do so by created one new .nvmrc file and modifying your .bashrc.",source:"@site/docs/node/nvm-per-project-folder.md",sourceDirName:"node",slug:"/node/nvm-per-project-folder",permalink:"/hm/ru/docs/node/nvm-per-project-folder",draft:!1,editUrl:"https://github.com/papa31/hm/edit/documentation/docs/node/nvm-per-project-folder.md",tags:[],version:"current",lastUpdatedBy:"PaPa31",lastUpdatedAt:1631434883,formattedLastUpdatedAt:"12.09.2021",frontMatter:{id:"nvm-per-project-folder",title:"nvm per Project Folder",date:"2021-09-11T16:03:29.000Z"},sidebar:"Docs",previous:{title:"Do I commit package-lock.json",permalink:"/hm/ru/docs/node/npm/do-i-commit-package-lock-json"},next:{title:"nvm-windows",permalink:"/hm/ru/docs/node/nvm-windows"}},d={},u=[{value:".nvmrc",id:"nvmrc",level:2},{value:".bashrc",id:"bashrc",level:2},{value:"Usage",id:"usage",level:2}],p={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you want to set a specific ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," version for the certain project, you can do so by created one new ",(0,a.kt)("inlineCode",{parentName:"p"},".nvmrc")," file and modifying your ",(0,a.kt)("inlineCode",{parentName:"p"},".bashrc"),"."),(0,a.kt)("h2",{id:"nvmrc"},".nvmrc"),(0,a.kt)("p",null,"Just ",(0,a.kt)("inlineCode",{parentName:"p"},"cd")," (",(0,a.kt)("inlineCode",{parentName:"p"},"cd /mnt/sdc2/static/textblock")," in my case) to your project root folder and run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'echo "10" > .nvmrc\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".nvmrc")," file will be crated wih just one line. ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," is the required node version."),(0,a.kt)("h2",{id:"bashrc"},".bashrc"),(0,a.kt)("p",null,"Find the ",(0,a.kt)("inlineCode",{parentName:"p"},".bashrc")," file in your home directory (",(0,a.kt)("inlineCode",{parentName:"p"},"cd ~"),") and add  this code to the end of the ",(0,a.kt)("inlineCode",{parentName:"p"},".bashrc"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=".bashrc"',title:'".bashrc"'},'cdnvm() {\n    cd "$@";\n    nvm_path=$(nvm_find_up .nvmrc | tr -d \'\\n\')\n\n    # If there are no .nvmrc file, use the default nvm version\n    if [[ ! $nvm_path = *[^[:space:]]* ]]; then\n\n        declare default_version;\n        default_version=$(nvm version default);\n\n        # If there is no default version, set it to `node`\n        # This will use the latest version on your machine\n        if [[ $default_version == "N/A" ]]; then\n            nvm alias default node;\n            default_version=$(nvm version default);\n        fi\n\n        # If the current version is not the default version, set it to use the default version\n        if [[ $(nvm current) != "$default_version" ]]; then\n            nvm use default;\n        fi\n\n        elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then\n        declare nvm_version\n        nvm_version=$(<"$nvm_path"/.nvmrc)\n\n        declare locally_resolved_nvm_version\n        # `nvm ls` will check all locally-available versions\n        # If there are multiple matching versions, take the latest one\n        # Remove the `->` and `*` characters and spaces\n        # `locally_resolved_nvm_version` will be `N/A` if no local versions are found\n        locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d \'\\->*\' | tr -d \'[:space:]\')\n\n        # If it is not already installed, install it\n        # `nvm install` will implicitly use the newly-installed version\n        if [[ "$locally_resolved_nvm_version" == "N/A" ]]; then\n            nvm install "$nvm_version";\n        elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then\n            nvm use "$nvm_version";\n        fi\n    fi\n}\nalias cd=\'cdnvm\'\ncd $PWD\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Then run in your project folder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nvm use\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"nvm use")," will traverse directory structure upwards from the current directory looking for the ",(0,a.kt)("inlineCode",{parentName:"p"},".nvmrc")," file. And you should see:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ nvm use\nFound '/mnt/sdc2/static/textblock/.nvmrc' with version <10>\nNow using node v10.23.0 (npm v6.14.8)\n")),(0,a.kt)("p",null,"After that, all other parent folders will use the ",(0,a.kt)("a",{parentName:"p",href:"nvm#set-the-default-node-version"},"default node version"),"."),(0,a.kt)("p",null,"You can check current version of ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," in certain folder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node -v     # or node --version\n")),(0,a.kt)("p",null,"Source: ",(0,a.kt)("a",{href:"https://github.com/nvm-sh/nvm#nvmrc",class:"external"},"github.com: .nvmrc")))}m.isMDXComponent=!0}}]);