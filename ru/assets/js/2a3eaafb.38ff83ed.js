"use strict";(self.webpackChunkhuman_and_machine=self.webpackChunkhuman_and_machine||[]).push([[65913],{75280:function(n){n.exports=JSON.parse('{"blogPosts":[{"id":"/2021/09/19/nvs-one-node-version-per-terminal-in-windows","metadata":{"permalink":"/hm/ru/blog/2021/09/19/nvs-one-node-version-per-terminal-in-windows","editUrl":"https://github.com/papa31/hm/edit/documentation/blog/2021-09-19-nvs-one-node-version-per-terminal-in-windows.mdx","source":"@site/blog/2021-09-19-nvs-one-node-version-per-terminal-in-windows.mdx","title":"nvs: One Node Version Per Terminal in Windows","description":"I tried to configure nvm-windows to automatically change the node version based on the folder with a specific .nvmrc file. But unsuccessfully. When I used to run nvm use the node version changed globally.","date":"2021-09-19T13:47:35.000Z","formattedDate":"19 \u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f 2021 \u0433.","tags":[{"label":"nvs","permalink":"/hm/ru/blog/tags/nvs"},{"label":"node","permalink":"/hm/ru/blog/tags/node"}],"readingTime":2.94,"truncated":true,"authors":[{"name":"papa31","title":"bibel miner","url":"https://github.com/papa31","imageURL":"https://github.com/papa31.png","key":"papa31"}],"frontMatter":{"title":"nvs: One Node Version Per Terminal in Windows","authors":["papa31"],"tags":["nvs","node"],"date":"2021-09-19T13:47:35.000Z","decription":"Install and setup nvs to Windows for PowerShell and Git-Bash","draft":false},"nextItem":{"title":"Docusaurus: Test & Build","permalink":"/hm/ru/blog/2020/12/21/docusaurus-test-and-build"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nI tried to configure [nvm-windows](https://github.com/coreybutler/nvm-windows) to automatically change the `node` version based on the folder with a specific `.nvmrc` file. But unsuccessfully. When I used to run `nvm use` the node version changed globally.\\n\\nI have read about <a href=\'https://github.com/jasongin/nvs#automatic-switching-per-directory\' class=\'external\'>nvs: Automatic Switching Per Directory (github.com)</a> in `nvs readme file` and decided to give it a try.\\n\\n\x3c!--truncate--\x3e\\n\\n## Remove nvm-windows\\n\\nGo to `C:\\\\Users\\\\[username]\\\\AppData\\\\Roaming\\\\nvm` and run `unins000.exe` by double clicking it.\\n\\n## Install nvs\\n\\nI downloaded the <a href=\'https://github.com/jasongin/nvs/releases/tag/v1.6.0\' class=\'external\'>nvs-1.6.0.msi</a> version of `nvs` and then ran this file by double clicking on it.\\n\\n## Adding node versions\\n\\nTo add a specific `node` version, run `nvs add` with the version number:\\n\\n```powershell\\n\u276f nvs add 12.21.0\\nAdding: node/12.21.0/x64\\nExtracting  [###########################] 100%\\nPATH += $env:LOCALAPPDATA\\\\nvs\\\\node\\\\12.21.0\\\\x64\\n```\\n\\n## Setting the default node version\\n\\nRun `nvs link` with the version number:\\n\\n```powershell\\nnvs link 12.21.0\\n```\\n\\n## Setup Git-Bash\\n\\n:::note\\n\\n`Git-Bash` is my fallback. It allows the use Unix command sintax.\\n\\n:::\\n\\nAdd to `C:\\\\Users\\\\[username]\\\\.bash_profile` these two lines:\\n\\n```bash title=\\".bash_profile\\"\\nif [ -f ~/.bashrc ]; then . ~/.bashrc; fi\\n```\\n\\nAdd to `C:\\\\Users\\\\[username]\\\\.bashrc` these lines (if this file is missing, create it in `notepad`):\\n\\n```bash title=\\".bashrc\\"\\nfunction setupNvs {\\n\\texport NVS_HOME=\\"$LOCALAPPDATA\\\\\\\\nvs\\";\\n\\t[ -s \\"$NVS_HOME/nvs.sh\\" ] && source \\"$NVS_HOME/nvs.sh\\" >> /dev/null;\\n\\treturn 0;\\n}\\nsetupNvs\\n```\\n\\n:::caution\\n\\nLook at th line `export NVS_HOME=\\"$LOCALAPPDATA\\\\\\\\nvs\\";` this is where `windows env` (%LOCALAPPDATA%\\\\nvs) is converted to `unix env`. In case of error see for example: <a href=\'https://superuser.com/questions/1284276/how-to-use-localappdata-with-git-bash-in-windows\' class=\'external\'>superuser.com: How To Use Localappdata With Git Bash In Windows</a>\\n\\n:::\\n\\n## nvs Basic Usage\\n\\nOpen `PowerShell` or `Git-Bash` terminal.\\n\\nLet\'s create two project folders with two different `.nvmrc` files using these commands:\\n\\n<Tabs defaultValue=\\"powershell\\" values={[\\n\\t{ label: \\"PowerShell\\", value: \\"powershell\\" },\\n\\t{ label: \\"Git-Bash\\", value: \\"gitbash\\" }\\n]}>\\n\\n<TabItem value=\\"powershell\\">\\n\\n```powershell\\ncd ~\\nmkdir one\\ncd one\\n\\"10.24.0\\" | Out-File .nvmrc     # create .nvmrc file with node version\\n[string]::Join( \\"`n\\", (gc .nvmrc)) | sc .nvmrc  # convert the line above from Windows to Unix\\n\\ncd ~\\nmkdir two\\ncd two\\n\\"14.16.0\\" | Out-File .nvmrc     # create .nvmrc file with node version\\n[string]::Join( \\"`n\\", (gc .nvmrc)) | sc .nvmrc  # convert the line above from Windows to Unix\\n```\\n\\n</TabItem>\\n\\n<TabItem value=\\"gitbash\\">\\n\\n```bash\\ncd ~\\nmkdir one\\ncd one\\necho \\"10.24.0\\" > .nvmrc     # create .nvmrc file with node version\\n\\ncd ~\\nmkdir two\\ncd two\\necho \\"14.16.0\\" > .nvmrc     # create .nvmrc file with node version\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## Manual switching using `.nvmrc`\\n\\nLet\'s go to the project `one` and run `nvs auto` (in `PowerShell` or `Git-Bash`):\\n\\n```powershell\\n\u276f nvs auto\\nPATH -= $env:LOCALAPPDATA\\\\nvs\\\\default\\nPATH += $env:LOCALAPPDATA\\\\nvs\\\\node\\\\10.24.0\\\\x64\\n```\\n\\n:::note\\n\\nIf everything is ok, `nvs` will automatically download the correct `node` version and activate it.\\n\\n:::\\n\\n:::caution\\n\\nIn case of an error, you may need to edit or replace this line:\\n\\n```powershell title=\\"PowerShell\\"\\n[string]::Join( \\"`n\\", (gc .nvmrc)) | sc .nvmrc\\n```\\n\\nsource: <a href=\'https://stackoverflow.com/questions/5102115/unix-format-files-with-powershell\' class=\'external\'>stackoverflow.com: Unix Format Files With Powershell</a>\\n\\n:::\\n\\nThen open second terminal, go to the project `two` folder and again run `nvs auto`:\\n\\n```powershell\\n\u276f nvs auto\\nPATH -= $env:LOCALAPPDATA\\\\nvs\\\\default\\nPATH += $env:LOCALAPPDATA\\\\nvs\\\\node\\\\14.16.0\\\\x64\\n```\\n\\nAgain, `nvs` install the required node version and then change the `environment variable` to use it.\\n\\n## Check Switching Ability\\n\\nCheck the version of node in the folder `one`  (in first terminal):\\n\\n```powershell\\n\u276f node -v\\nv10.24.0\\n```\\n\\nCheck the node version in the folder `two` (in second terminal):\\n\\n```\\n\u276f node -v\\n14.26.0\\n```\\n\\n:::tip\\n\\nHence, `nvs` changes the node versions locally, one node version per terminal.\\n\\n:::\\n\\nWhich was required to check."},{"id":"/2020/12/21/docusaurus-test-and-build","metadata":{"permalink":"/hm/ru/blog/2020/12/21/docusaurus-test-and-build","editUrl":"https://github.com/papa31/hm/edit/documentation/blog/2020-12-21-docusaurus-test-and-build.md","source":"@site/blog/2020-12-21-docusaurus-test-and-build.md","title":"Docusaurus: Test & Build","description":"Setup all 3 ways Docusaurus start","date":"2020-12-21T00:00:00.000Z","formattedDate":"21 \u0434\u0435\u043a\u0430\u0431\u0440\u044f 2020 \u0433.","tags":[{"label":"docusaurus","permalink":"/hm/ru/blog/tags/docusaurus"},{"label":"settings","permalink":"/hm/ru/blog/tags/settings"}],"readingTime":2.94,"truncated":true,"authors":[{"name":"papa31","title":"bibel miner","url":"https://github.com/papa31","imageURL":"https://github.com/papa31.png","key":"papa31"}],"frontMatter":{"title":"Docusaurus: Test & Build","authors":["papa31"],"tags":["docusaurus","settings"],"description":"Setup all 3 ways Docusaurus start","image":"i.imgur.com/mErPwqL.png","draft":false},"prevItem":{"title":"nvs: One Node Version Per Terminal in Windows","permalink":"/hm/ru/blog/2021/09/19/nvs-one-node-version-per-terminal-in-windows"}},"content":"To test your Docusaurus pages in a browser, you need to do [this setup](#) and run: `npm run start`. To see your pages on your website, you need to [configure remote](#) and execute: `git push`.\\n\\nBut what if the local test succeeds but the remote build fails. \ud83e\udd14\\n\\n\x3c!--truncate--\x3e\\n\\n## Initial Setup\\n\\nInitially I configured Docusaurus-v2 to:\\n\\n1. start the development server `npm run start` and\\n2. upload my content to GitHub using `git push`.\\n\\nThe simplified test pages were fine. But when rendering many markdown files with links and images, deployment fails.\\n\\n## Broken Links\\n\\nThis is the most common error. Best of all, you won\'t catch this error when you test pages through the development server with `npm run start`.\\n\\n::: note Broken Links You can only catch `broken links` when you **build**. :::\\n\\nI immediately got a broken link error when I uploaded quite a few raw pages on GitHub. But finding broken links on a remote server is not easy. Not enough information. You have to make **frequent commits**. And often without success.\\n\\nTo fix the broken links\' problem `without extra commits`, you need to do a local build.\\n\\n## Local Build\\n\\nTo make build on your local machine and run server is not too hard:\\n\\n```bash npm2yarn\\nnpm run build\\nnpm run serve\\n```\\n\\nBut there are pitfalls \u2014 `unstable BaseUrl`. In local build \u2014 ... In remote build \u2014 ...\\n\\n## Unstable BaseUrl\\n\\nThis is common issue for **node world** projects: for local build you need to use the one data, for remote build the other data.\\n\\n### production/development issue\\n\\nIn first case I need:\\n\\n`baseUrl = \'/hm/\'`\\n\\nin other case:\\n\\n`baseUrl = \'/\'`\\n\\nOne of the typical ways to resolve the problem is to use environment variables \u2014 `env`.\\n\\n## env\\n\\nThe Docusaurus documentation has a section on [Environment settings](https://v2.docusaurus.io/docs/deployment/#environment-settings). But there is not enough information about utilities such as `cross-env`. This is a utility that Docusaurus itself uses.\\n\\n### cross-env\\n\\nRun scripts that set and use environment variables across platforms\\n\\nInstall:\\n\\n```bash npm2yarn\\nnpm install --save-dev cross-env\\n```\\n\\nThree lines:\\n\\n```json title=\\"package.json\\" {5,8,11}\\n{\\n  \\"name\\": \\"notes\\",\\n  \\"version\\": \\"0.0.0\\",\\n  \\"private\\": true,\\n  \\"homepage\\": \\"/hm\\",\\n  \\"scripts\\": {\\n    \\"docusaurus\\": \\"docusaurus\\",\\n    \\"start\\": \\"cross-env BASE_URL=\'/hm/\' docusaurus start\\",\\n    \\"build\\": \\"docusaurus build\\",\\n    \\"swizzle\\": \\"docusaurus swizzle\\",\\n    \\"deploy\\": \\"cross-env BASE_URL=\'/hm/\' GIT_USER=git USE_SSH=true docusaurus deploy\\",\\n    \\"serve\\": \\"docusaurus serve\\",\\n    \\"clear\\": \\"docusaurus clear\\"\\n  },\\n\\n  ...\\n```\\n\\nTwo lines:\\n\\n```js title=\\"docusaurus.config.js\\" {1,7}\\nconst baseUrl = process.env.BASE_URL || \'/\';\\n\\nmodule.exports = {\\n  title: \'hm\',\\n  tagline: \'Human@Machine\',\\n  url: \'https://papa31.github.io\',\\n  baseUrl,\\n  onBrokenLinks: \'throw\',\\n\\n  ...\\n```\\n\\n\x3c!-- prettier-ignore-start --\x3e\\n:::warning\\n\\nIf you get the error:\\n\\n```sh\\n\'cross-env\' is not recognized\\n```\\n\\nYou can run these two commands in your `bash` (Linux) or `Git Bash` (Windows):\\n\\n```sh\\nrm -rf node_modules package-lock.json\\nnpm i\\n```\\n\\nOr you can try [install cross-env globally](https://stackoverflow.com/questions/45034581/laravel-5-4-cross-env-is-not-recognized-as-an-internal-or-external-command)\\n\\n:::\\n\x3c!-- prettier-ignore-end --\x3e\\n\\nBut how do I add an environment variable remotely?\\n\\n### Set Remote `env`\\n\\nYou need use workflow file. Edit one line:\\n\\n```yml title=\\"/.github/workflows/documentation.yml\\" {7}\\n        ...\\n\\n      - name: Release to GitHub Pages\\n        env:\\n          USE_SSH: true\\n          GIT_USER: git\\n          BASE_URL: \'/hm/\'\\n        run: |\\n          git config --global user.email \\"actions@gihub.com\\"\\n          git config --global user.name \\"gh-actions\\"\\n          if [ -e yarn.lock ]; then\\n          yarn install --frozen-lockfile\\n          elif [ -e package-lock.json ]; then\\n          npm ci\\n          else\\n          npm i\\n          fi\\n          npx docusaurus deploy\\n```\\n\\n## todo: insert whole files as in Docusaurus site docs(?)\\n\\n## Windows\\n\\nIf error:\\n\\n```powershell title=\\"PowerShell\\"\\n\'cross-env\' is not recognized as an internal or external command,\\noperable program or batch file.\\n```\\n\\nRun this:\\n\\n```powershell\\nrm -rf node_modules && npm install\\n```\\n\\nDoesn\'t help? Read other tips from [stackoverflow](https://stackoverflow.com/questions/43685777/laravel-mix-sh-1-cross-env-not-found-error)."}]}')}}]);