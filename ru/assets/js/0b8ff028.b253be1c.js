"use strict";(self.webpackChunkhuman_and_machine=self.webpackChunkhuman_and_machine||[]).push([[74373],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(t),f=o,d=m["".concat(p,".").concat(f)]||m[f]||u[f]||a;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},68443:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],s={id:"13-04-setting-up-js-config-for-form",title:"13.04 Setting Up Js Config For Form",date:new Date("2021-04-20T20:37:17.000Z")},p=void 0,l={unversionedId:"react-complete-guide/13-forms-and-form-validation/13-04-setting-up-js-config-for-form",id:"react-complete-guide/13-forms-and-form-validation/13-04-setting-up-js-config-for-form",title:"13.04 Setting Up Js Config For Form",description:"Input.js",source:"@site/courses/react-complete-guide/13-forms-and-form-validation/13-04-setting-up-js-config-for-form.md",sourceDirName:"react-complete-guide/13-forms-and-form-validation",slug:"/react-complete-guide/13-forms-and-form-validation/13-04-setting-up-js-config-for-form",permalink:"/hm/ru/courses/react-complete-guide/13-forms-and-form-validation/13-04-setting-up-js-config-for-form",draft:!1,editUrl:"https://github.com/papa31/hm/edit/documentation/courses/react-complete-guide/13-forms-and-form-validation/13-04-setting-up-js-config-for-form.md",tags:[],version:"current",lastUpdatedBy:"PaPa31",lastUpdatedAt:1631602446,formattedLastUpdatedAt:"14.09.2021",frontMatter:{id:"13-04-setting-up-js-config-for-form",title:"13.04 Setting Up Js Config For Form",date:"2021-04-20T20:37:17.000Z"},sidebar:"Docs",previous:{title:"13.03 Creating Custom Dynamic Input Components",permalink:"/hm/ru/courses/react-complete-guide/13-forms-and-form-validation/13-03-creating-custom-dynamic-input-components"},next:{title:"13.05 Dynamically Reate Inputs Base On Js Config",permalink:"/hm/ru/courses/react-complete-guide/13-forms-and-form-validation/13-05-dynamically-reate-inputs-base-on-js-config"}},c={},u=[{value:"<code>Input.js</code>",id:"inputjs",level:2},{value:"<code>ContactData.js</code>",id:"contactdatajs",level:2}],m={toc:u};function f(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"inputjs"},(0,a.kt)("inlineCode",{parentName:"h2"},"Input.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Input.js" {7,9-15,18-24,27-33}',title:'"Input.js"',"{7,9-15,18-24,27-33}":!0},'import React from "react";\nimport classes from "./Input.module.css";\n\nconst input = (props) => {\n  let inputElement = null;\n\n  switch (props.elementType) {\n    case "input":\n      inputElement = (\n        <input\n          className={classes.InputElement}\n          {...props.elementConfig}\n          value={props.value}\n        />\n      );\n      break;\n    case "textarea":\n      inputElement = (\n        <textarea\n          className={classes.InputElement}\n          {...props.elementConfig}\n          value={props.value}\n        />\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={classes.InputElement}\n          {...props.elementConfig}\n          value={props.value}\n        />\n      );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n')),(0,a.kt)("h2",{id:"contactdatajs"},(0,a.kt)("inlineCode",{parentName:"h2"},"ContactData.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="ContactData.js" {10-60,85}',title:'"ContactData.js"',"{10-60,85}":!0},'import React, { Component } from "react";\nimport axios from "../../../axios-orders";\nimport Button from "../../../components/UI/Button/Button";\nimport Input from "../../../components/UI/Input/Input";\nimport Spinner from "../../../components/UI/Spinner/Spinner";\nimport classes from "./ContactData.module.css";\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: "input",\n        elementConfig: {\n          type: "text",\n          placeholder: "Your Name",\n        },\n        value: "",\n      },\n      street: {\n        elementType: "input",\n        elementConfig: {\n          type: "text",\n          placeholder: "Street",\n        },\n        value: "",\n      },\n      zipCode: {\n        elementType: "input",\n        elementConfig: {\n          type: "text",\n          placeholder: "ZIP Code",\n        },\n        value: "",\n      },\n      country: {\n        elementType: "input",\n        elementConfig: {\n          type: "text",\n          placeholder: "Country",\n        },\n        value: "",\n      },\n      email: {\n        elementType: "input",\n        elementConfig: {\n          type: "email",\n          placeholder: "Your e-mail",\n        },\n        value: "",\n      },\n      deliveryMethod: {\n        elementType: "select",\n        elementConfig: {\n          options: [\n            { value: "fastest", displayValue: "Fastest" },\n            { value: "cheapest", displayValue: "Cheapest" },\n          ],\n        },\n        value: "",\n      },\n    },\n    loading: false,\n  };\n\n  orderHandler = (event) => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.price,\n    };\n    axios\n      .post("/orders.json", order)\n      .then((response) => {\n        this.setState({ loading: false });\n        this.props.history.push("/");\n      })\n      .catch((error) => {\n        this.setState({ loading: false });\n      });\n  };\n  render() {\n    let form = (\n      <form>\n        <Input elementType="..." elementConfig="..." value="..." />\n        <Input\n          inputtype="input"\n          type="text"\n          name="email"\n          placeholder="Your Mail"\n        />\n        <Input\n          inputtype="input"\n          type="text"\n          name="street"\n          placeholder="Street"\n        />\n        <Input\n          inputtype="input"\n          type="text"\n          name="postal"\n          placeholder="Postal Code"\n        />\n        <Button btnType="Success" clicked={this.orderHandler}>\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.state.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter your Contact Data</h4>\n        {form}\n      </div>\n    );\n  }\n}\nexport default ContactData;\n')))}f.isMDXComponent=!0}}]);