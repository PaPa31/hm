"use strict";(self.webpackChunkhuman_and_machine=self.webpackChunkhuman_and_machine||[]).push([[7803],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,h=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1994:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],l={id:"11-14-absolute-vs-relative-paths-article",title:"11.14 Absolute vs Relative Paths Article",date:new Date("2021-04-14T18:21:57.000Z")},p=void 0,s={unversionedId:"react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article",id:"react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article",title:"11.14 Absolute vs Relative Paths Article",description:"You learned about `\xa0, you learned about the to`\xa0 property it uses.",source:"@site/courses/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article.md",sourceDirName:"react-complete-guide/11-multi-page-feeling-in-single-page-app-routing",slug:"/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article",permalink:"/hm/ru/courses/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article",editUrl:"https://github.com/papa31/hm/edit/documentation/courses/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-14-absolute-vs-relative-paths-article.md",tags:[],version:"current",lastUpdatedBy:"PaPa31",lastUpdatedAt:1631602446,formattedLastUpdatedAt:"14.09.2021",frontMatter:{id:"11-14-absolute-vs-relative-paths-article",title:"11.14 Absolute vs Relative Paths Article",date:"2021-04-14T18:21:57.000Z"},sidebar:"Docs",previous:{title:"11.13 Absolute vs Relative Paths",permalink:"/hm/ru/courses/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-13-absolute-vs-relative-paths"},next:{title:"11.15 Styling Active Route",permalink:"/hm/ru/courses/react-complete-guide/11-multi-page-feeling-in-single-page-app-routing/11-15-styling-active-route"}},u=[{value:"Absolute Paths",id:"absolute-paths",children:[],level:2},{value:"Relative Paths",id:"relative-paths",children:[],level:2}],c={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You learned about ",(0,o.kt)("inlineCode",{parentName:"p"},"<Link>"),"\xa0, you learned about the ",(0,o.kt)("inlineCode",{parentName:"p"},"to"),"\xa0 property it uses."),(0,o.kt)("p",null,"The path you can use in to can be either ",(0,o.kt)("strong",{parentName:"p"},"absolute")," or ",(0,o.kt)("strong",{parentName:"p"},"relative"),"."),(0,o.kt)("h2",{id:"absolute-paths"},"Absolute Paths"),(0,o.kt)("p",null,"By default, if you just enter ",(0,o.kt)("inlineCode",{parentName:"p"},'to="/some-path"'),"\xa0 or ",(0,o.kt)("inlineCode",{parentName:"p"},'to="some-path"'),"\xa0, that's an ",(0,o.kt)("strong",{parentName:"p"},"absolute path"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Absolute path"),"\xa0means that it's ",(0,o.kt)("strong",{parentName:"p"},"always appended right after your domain"),". Therefore, both syntaxes (with and without leading slash) lead to ",(0,o.kt)("inlineCode",{parentName:"p"},"example.com/some-path"),"\xa0."),(0,o.kt)("h2",{id:"relative-paths"},"Relative Paths"),(0,o.kt)("p",null,"Sometimes, you might want to create a relative path instead. This is especially useful, if your component is already loaded given a specific path (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"posts"),"\xa0) and you then want to append something to that existing path (so that you, for example, get ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts/new"),"\xa0)."),(0,o.kt)("p",null,"If you're on a component loaded via ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts"),"\xa0,\xa0",(0,o.kt)("inlineCode",{parentName:"p"},'to="new"'),"\xa0 would lead to ",(0,o.kt)("inlineCode",{parentName:"p"},"example.com/new"),"\xa0, ",(0,o.kt)("strong",{parentName:"p"},"NOT")," ",(0,o.kt)("inlineCode",{parentName:"p"},"example.com/posts/new"),"\xa0."),(0,o.kt)("p",null,"To change this behavior, you have to find out which path you're on and add the new fragment to that existing path. You can do that with the ",(0,o.kt)("inlineCode",{parentName:"p"},"url"),"\xa0 property of ",(0,o.kt)("inlineCode",{parentName:"p"},"props.match"),"\xa0:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<Link to={props.match.url + '/new'}>\n")),(0,o.kt)("p",null,"will lead to ",(0,o.kt)("inlineCode",{parentName:"p"},"example.com/posts/new"),"\xa0 when placing this link in a component loaded on ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts"),"\xa0. If you'd use the same ",(0,o.kt)("inlineCode",{parentName:"p"},"<Link>"),"\xa0 in a component loaded via ",(0,o.kt)("inlineCode",{parentName:"p"},"/all-posts"),"\xa0, the link would point to ",(0,o.kt)("inlineCode",{parentName:"p"},"/all-posts/new"),"\xa0."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"There's no better or worse way of creating Link paths")," - choose the one you need. Sometimes, you want to ensure that you always load the same path, no matter on which path you already are =>\xa0Use absolute paths in this scenario."),(0,o.kt)("p",null,"Use relative paths if you want to navigate relative to your existing path."))}m.isMDXComponent=!0}}]);